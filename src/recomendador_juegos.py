# -*- coding: utf-8 -*-
"""Untitled9.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qVAxVezOF-8mVBVSqGqW3lg5x3MDKySw
"""

import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.metrics import roc_curve, roc_auc_score
import numpy as np

# 1. Cargar el dataset
games_df = pd.read_csv('output_steam_games.csv')

# Aseguramos que las columnas que utilizaremos no tengan valores nulos
games_df['Géneros_Juego'] = games_df['Géneros_Juego'].fillna('')
games_df['Etiquetas_Juego'] = games_df['Etiquetas_Juego'].fillna('')

# 2. Vectorización del contenido del juego (géneros y etiquetas)
tfidf = TfidfVectorizer(stop_words='english')
games_df['contenido'] = games_df['Géneros_Juego'] + " " + games_df['Etiquetas_Juego']
tfidf_matrix = tfidf.fit_transform(games_df['contenido'])

# 3. Similitud de coseno
cosine_sim = cosine_similarity(tfidf_matrix, tfidf_matrix)

# 4. Crear función para obtener recomendaciones basadas en un juego dado
def get_recommendations(title, cosine_sim=cosine_sim):
    try:
        idx = games_df[games_df['Título_Juego'] == title].index[0]
        sim_scores = list(enumerate(cosine_sim[idx]))
        sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)
        sim_scores = sim_scores[1:6]  # Top 5 recomendaciones
        game_indices = [i[0] for i in sim_scores]
        return games_df['Título_Juego'].iloc[game_indices].reset_index(drop=True)
    except IndexError:
        return "El título no está en la base de datos."

# 5. Probar la función de recomendación
titulo_juego = "Garry's Mod"  # Cambia este título por uno que exista en tu dataset
recomendaciones = get_recommendations(titulo_juego)

print(f"Juegos recomendados para '{titulo_juego}':")
print(recomendaciones)

# 6. Gráficos de similitud
def plot_heatmap(cosine_sim, title='Similitud de Coseno entre Juegos'):
    plt.figure(figsize=(10, 8))
    sns.heatmap(cosine_sim[:10, :10], cmap='coolwarm', annot=True)
    plt.title(title)
    plt.xlabel('Juego Index')
    plt.ylabel('Juego Index')
    plt.show()

# Mostrar el heatmap para los primeros 10 juegos
plot_heatmap(cosine_sim)

# 7. Curva ROC (Simulación para un caso de recomendaciones)
# Generar etiquetas simuladas y probabilidades
# Supongamos que tenemos etiquetas reales (1 para relevante y 0 para no relevante)
y_true = np.random.randint(2, size=50)  # Generamos valores binarios aleatorios como etiquetas verdaderas
y_scores = cosine_sim[0][:50]  # Tomamos los primeros 50 valores de la similitud como "predicciones"

# Calcular el ROC AUC y la curva ROC
fpr, tpr, thresholds = roc_curve(y_true, y_scores)
roc_auc = roc_auc_score(y_true, y_scores)

# Graficar la curva ROC
plt.figure(figsize=(8, 6))
plt.plot(fpr, tpr, label=f'Curva ROC (AUC = {roc_auc:.2f})', color='darkorange', lw=2)
plt.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--')
plt.xlabel('Tasa de Falsos Positivos (FPR)')
plt.ylabel('Tasa de Verdaderos Positivos (TPR)')
plt.title('Curva ROC para Sistema de Recomendación')
plt.legend(loc="lower right")
plt.show()